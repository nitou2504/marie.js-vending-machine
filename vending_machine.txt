Jump Main

//Load coins1_m
///////////////// variables & pointers
/ unicode offset
offset, DEC 48
/ general counter
i, HEX 0
/ machine coins
coins1_m, DEC 2
coins50_m, DEC 2
coins25_m, DEC 2
/ machine money 
// TODO update with initial machine coins (
money_m, DEC 0
/ user money
// TODO update with initial user coins
money_u, DEC 0
/ user coins 
coins1_u, DEC 0
coins50_u, DEC 0
coins25_u, DEC 0
/ product prices
p_prices_start, HEX B /puntero aqui + 0
p1_price, DEC 250
p2_price, DEC 75
p3_price, DEC 25
p4_price, DEC 100
p5_price, DEC 1000
/ product quantities
p_quantities_start, HEX 11 /puntero + 0
p1_q, DEC 2
p2_q, DEC 3
p3_q, DEC 4
p4_q, DEC 0
p5_q, DEC 0
/ currently wanted product
wanted_product, DEC 0


///////////////// strings (first line is pointer to string start (+1), manually added)
/ Ingresar
s_ingresar, HEX 19 /HEX AAA
	DEC 73
	DEC 110
	DEC 103
	DEC 114
	DEC 101
	DEC 115
	DEC 97
	DEC 114
	DEC 32
	DEC 000
/ Cantidad
s_cantidad, HEX 24
	DEC 67
	DEC 97
	DEC 110
	DEC 116
	DEC 105
	DEC 100
	DEC 97
	DEC 100
	DEC 32
	DEC 000
    
/ Monedas 
s_monedas, HEX 2F / HEX BBB
	DEC 32
	DEC 77
	DEC 111
	DEC 110
	DEC 101
	DEC 100
	DEC 97
	DEC 115
	DEC 32
    DEC 000

/ Producto
s_producto, HEX 3A
	DEC 80
	DEC 114
	DEC 111
	DEC 100
	DEC 117
	DEC 99
	DEC 116
	DEC 111
	DEC 32
	DEC 000
    
/ Disponible
s_disponible,HEX 45
 	DEC 68 
	DEC 105
	DEC 115
	DEC 112
	DEC 111
	DEC 110
	DEC 105
	DEC 98
	DEC 108
	DEC 101
	DEC 32
	DEC 000
    
/ de    
s_de, HEX 52 / HEX AAB
	DEC 100
	DEC 101
    DEC 32
	DEC 000
    
/ $1
s100, HEX 57
	DEC 36
	DEC 49
	DEC 32
	DEC 000
    
/ $0.50
s50, HEX 5C
	DEC 36
	DEC 48
	DEC 46
	DEC 53
	DEC 48
	DEC 32
	DEC 000
    
/ $0.25
s25, HEX 64
	DEC 36
	DEC 48
	DEC 46
	DEC 50
	DEC 53
	DEC 32
	DEC 000
    
/ line break
lb, DEC 10

/ space
s_space, DEC 32

/ =
s_equal, DEC 61

/ (en unicode, terminar con dec/hex 0)
s_unicode, HEX 6F
	DEC 40
	DEC 101
	DEC 110
	DEC 32
	DEC 117
	DEC 110
	DEC 105
	DEC 99
	DEC 111
	DEC 100
	DEC 101
	DEC 44
	DEC 32
	DEC 116
	DEC 101
	DEC 114
	DEC 109
	DEC 105
	DEC 110
	DEC 97
	DEC 114
	DEC 32
	DEC 99
	DEC 111
	DEC 110
	DEC 32
	DEC 100
	DEC 101
	DEC 99
	DEC 47
	DEC 104
	DEC 101
	DEC 120
	DEC 32
	DEC 48
	DEC 41
	DEC 32
	DEC 000
/ (en decimal)
s_decimal, HEX 96
	DEC 40
	DEC 101
	DEC 110
	DEC 32
	DEC 100
	DEC 101
	DEC 99
	DEC 105
	DEC 109
	DEC 97
	DEC 108
	DEC 41
	DEC 32
	DEC 000
    
s_Su, HEX A5
	DEC 83 
	DEC 117
    DEC 32
    DEC 000
    
s_cambio, HEX AA
	DEC 99
    DEC 97
    DEC 109
    DEC 98
    DEC 105
    DEC 111
	DEC 32
	DEC 000
    
s_es, HEX B3
	DEC 101
	DEC 115
	DEC 000
    
s_No_disponemos, HEX B7
	DEC 78
	DEC 111
    DEC 32
    DEC 100
    DEC 105
    DEC 115
    DEC 112
    DEC 111
    DEC 110
    DEC 101
    DEC 109
    DEC 111
    DEC 115
    DEC 32
	DEC 000

s_el, HEX C7
	DEC 101
	DEC 108
    DEC 32
	DEC 000
    
//Deseas comprar mas productos
s_pregunta, HEX CC
    DEC 68 //Deseas
    DEC 101
    DEC 115
    DEC 101
    DEC 97
    DEC 115
    DEC 32
    DEC 99  //comprar
    DEC 111
    DEC 109
    DEC 112
    DEC 114
    DEC 97
    DEC 114
    DEC 32
    DEC 109//mas
    DEC 97
    DEC 115
    DEC 32
	DEC 112 //productos
	DEC 114
	DEC 111
	DEC 100
	DEC 117
	DEC 99
	DEC 116
	DEC 111
    DEC 115
    DEC 63
	DEC 32
    DEC 10
    DEC 83 //S/N?
    DEC 47
    DEC 78
	DEC 000
    
s_falta_dinero,HEX F0 //no ingresaste suficiente dinero, vuelve a intentar
	DEC 78//No
    DEC 111
    DEC 32
    DEC 105//ingresaste
    DEC 110
    DEC 103
    DEC 114
    DEC 101
    DEC 115
    DEC 97
    DEC 115
    DEC 116
    DEC 101
    DEC 32
    DEC 115//suficiente
    DEC 117
    DEC 102
    DEC 105
    DEC 99
    DEC 105
    DEC 101
    DEC 110
    DEC 116
    DEC 101
    DEC 32
    DEC 100//dinero
    DEC 105
    DEC 110
    DEC 101
    DEC 114
    DEC 111
    DEC 32
    DEC 000

//variable nuevas, mover despues al inicio--------------------------------------
coins1_c, DEC 0
coins50_c, DEC 0
coins25_c, DEC 0
wanted_product_price, DEC 0
ONE, DEC 1
TWO, DEC 2
THREE, DEC 3
FOUR, DEC 4
FIVE,DEC 5
fifty, dec 50
twenty_five, dec 25

change, DEC 0


///////////////// functions

//update global money variables

update_money, HEX 0
        Load money_m
        Subt money_m
        Store money_m
        Load money_u
        Subt money_u
        Store money_u

        Load coins1_m
        Store Y
        Load hundred
        Store X
        JnS Mult
        Load money_m
        Add XY
        Store money_m

        Load coins50_m
        Store Y
        Load fifty
        Store X
        JnS Mult
        Load money_m
        Add XY
        Store money_m

        Load coins25_m
        Store Y
        Load twenty_five
        Store X
        JnS Mult
        Load money_m
        Add XY
        Store money_m

        Load coins1_u
        Store Y
        Load hundred
        Store X
        JnS Mult
        Load money_u
        Add XY
        Store money_u

        Load coins50_u
        Store Y
        Load fifty
        Store X
        JnS Mult
        Load money_u
        Add XY
        Store money_u

        Load coins25_u
        Store Y
        Load twenty_five
        Store X
        JnS Mult
        Load money_u
        Add XY
        Store money_u
	JumpI update_money
    
drop_product,HEX 0 //remove selected product
If_five,Load wanted_product
        Subt	 FIVE 
        Skipcond 000	
        Jump	 is_5	
If_four, Load wanted_product	
        Subt	 FOUR
        Skipcond 000	
		Jump	 is_4
If_three, Load wanted_product	
        Subt	 THREE
        Skipcond 000	
        Jump	 is_3
If_two, Load wanted_product	
        Subt	 TWO
        Skipcond 000	
        Jump	 is_2
        Jump     is_1
        
is_5, Load p5_q
		Skipcond 400
        Jump it_has_5
        Load BOOL_1
        Clear
		Store BOOL_1
        Jump EndIf_remove
it_has_5,Load BOOL_1
        ADD ONE
		Store BOOL_1
		Load p5_q        
        Subt ONE
        Store p5_q
        Jump EndIf_remove
is_4, Load p4_q
		Skipcond 400
        Jump it_has_4
        Load BOOL_1
        CLEAR
		Store BOOL_1
        Jump EndIf_remove
it_has_4,Load BOOL_1
        ADD ONE
		Store BOOL_1
		Load p4_q        
        Subt ONE
        Store p4_q
        Jump EndIf_remove
is_3, Load p3_q
		Skipcond 400
        Jump it_has_3
        Load BOOL_1
        Clear
		Store BOOL_1
        Jump EndIf_remove
it_has_3,Load BOOL_1
        ADD ONE
		Store BOOL_1
		Load p3_q        
        Subt ONE
        Store p3_q
        Jump EndIf_remove
is_2, Load p2_q
		Skipcond 400
        Jump it_has_2
        Load BOOL_1
        Clear
		Store BOOL_1
        Jump EndIf_remove
it_has_2,Load BOOL_1
        ADD ONE
		Store BOOL_1
		Load p2_q        
        Subt ONE
        Store p2_q
        Jump EndIf_remove
is_1, Load p1_q
		Skipcond 400
        Jump it_has_1
        Load BOOL_1
        Clear
		Store BOOL_1
        Jump EndIf_remove
it_has_1,Load BOOL_1
        ADD ONE
		Store BOOL_1
		Load p1_q        
        Subt ONE
        Store p1_q
        Jump EndIf_remove
        
EndIf_remove,JumpI drop_product
    
//set wanted product price
set_wp_price, HEX 0
If1,Load wanted_product
        Subt	 FIVE 
        Skipcond 000	
        Jump	 P_is_5	
If2, Load wanted_product	
        Subt	 FOUR
        Skipcond 000	
		Jump	 P_is_4
If3, Load wanted_product	
        Subt	 THREE
        Skipcond 000	
        Jump	 P_is_3
If4, Load wanted_product	
        Subt	 TWO
        Skipcond 000	
        Jump	 P_is_2
        Jump     P_is_1
	
P_is_5,Load p5_price
        Store wanted_product_price
        Jump EndIfwpp
    
P_is_4,Load p4_price
        Store wanted_product_price
        Jump EndIfwpp

P_is_3,Load  p3_price
        Store wanted_product_price
        Jump EndIfwpp
    
P_is_2,Load p2_price
        Store wanted_product_price
        Jump EndIfwpp
    
P_is_1,Load p1_price
        Store wanted_product_price
        Jump EndIfwpp
    
EndIfwpp, JumpI set_wp_price
    


//compute change
compute_change,HEX 0
JnS set_wp_price
    Load money_u
    Subt  wanted_product_price
    Store temp_1
    Load temp_1
	Skipcond 000
    jump suficiente_money
    Clear
    Store BOOL_3
    Clear
	Store temp_1
	Jump final_change
suficiente_money,Load BOOL_3
    ADD ONE
	Store BOOL_3
	Load temp_1
	Store change
     
    //calcular cambio de monedas de 100
    Load change
    Store N
    Load hundred
    Store D
    JnS division
    Load Answer
    Store coins1_c 
    
    Load coins1_c
    Store Y
    Load hundred
    Store X
    JnS Mult
    Load change
    Subt  XY
    Store change
    
    //calcular cambio de monedas de 50
    Load change
    Store N
    Load fifty
    Store D
    JnS division
    Load Answer
    Store coins50_c
    
    Load coins50_c
    Store Y
    Load fifty
    Store X
    JnS Mult
    Load change
    Subt  XY
    Store change
    
    //calcular cambio de monedas de 25
    Load change
    Store N
    Load twenty_five
    Store D
    JnS division
    Load Answer
    Store coins25_c
    
    Load coins25_c
    Store X
    Load twenty_five
    Store Y
    JnS Mult
    Load change
    Subt  XY
    Store change
    
    //quitar monedas de la maquina
    Load coins1_m
	Subt coins1_c
	Store coins1_m
    
    Load coins50_m
	Subt coins50_c
	Store coins50_m
    
    Load coins25_m
	Subt coins25_c
	Store coins25_m
    Jump final_change
    
final_change,JumpI compute_change
    
//prints user's change
print_change, HEX 0
        / section message
				JnS line_n_break
                Load s_Su
				JnS Getch
                Load s_cambio
				JnS Getch
				Load s_es
				JnS Getch
                JnS line_n_break
                / 1 coins
                Load s100
                JnS equal
				Load coins1_c
                JnS print_digits
				/ 50 coins
                Load s50
                JnS equal
				Load coins50_c
				JnS print_digits
				/ 25 coins
                Load s25
                JnS equal
				Load coins25_c
				JnS print_digits
    JumpI print_change
    
//returns user's money
return_money, HEX 0
    
        / section message
				JnS line_n_break
                Load s_Su
				JnS Getch
                Load s_cambio
				JnS Getch
				Load s_es
				JnS Getch
                JnS line_n_break
                / 1 coins
                Load s100
                JnS equal
				Load coins1_u
                JnS print_digits
                Load coins1_m
				Subt coins1_u
				Store coins1_m	
				/ 50 coins
                Load s50
                JnS equal
				Load coins50_u
				JnS print_digits
                Load coins50_m
				Subt coins50_u
				Store coins50_m	
				/ 25 coins
                Load s25
                JnS equal
				Load coins25_u
				JnS print_digits
                Load coins25_m
				Subt coins25_u
				Store coins25_m	
                
                
    JumpI return_money


// print coins
print_coins,    HEX 0
				/ section message
				JnS line_n_break
                load s_cantidad
				JnS Getch
                Load s_de
				JnS Getch
				Load s_monedas
				JnS Getch
                JnS line_n_break
                / 1 coins
                Load s100
                JnS equal
				Load coins1_m
                JnS print_digits
				/ 50 coins
                Load s50
                JnS equal
				Load coins50_m
				JnS print_digits
				/ 25 coins
                Load s25
                JnS equal
				Load coins25_m
				JnS print_digits
                JumpI print_coins

/ print product names, prices and quantities
products, DEC 5 / how many products leave at 5
current_quantity, HEX 0 
current_price, HEX 0
s_numeral, DEC 35
s_money, DEC 36

print_products, HEX 0
				Load products
				Store i
print_products_2, Load p_prices_start // updated current price
				  Add i
                  Store current_price
                  Load p_quantities_start // update current quantity
				  Add i
                  Store current_quantity
                  / output line #i product_name product_price (quantity)
                  Load s_numeral 				  
                  Output
                  Load i
                  Add offset 
                  Output
                  Load s_space
                  Output
                  Load one
                  Store money_format
                  LoadI current_price
                  JnS print_digits
                  Load s_space
                  Output
                  LoadI current_quantity
                  JnS disponibility
                  JnS break
                  JnS break
                  
                  / i--
                  Load i
                  Subt one
                  Store i
                  Skipcond 800
                  JumpI print_products
                  Jump print_products_2

/------Variables validacion, mover al inicio--------------/
/temp variables for checking inputs
temp_1,  DEC 0
temp_2, DEC 0
temp_3, DEC 0
/ boolean var for valid Input(1 if valid, 0 if not)
boolean_var, DEC 0
/ max money for user and machine
money_u_max, DEC 9900
money_m_max, DEC 30000
/ insert coins
input_coins,  HEX 0
		/ instruction message
        JnS line_n_break
        Load s_ingresar
		JnS Getch
		Load s_monedas
		JnS Getch
		Load s_decimal
		JnS Getch
		JnS line_n_break
		// 1 input
		Load s100
        JnS equal
        Load money_m
pedir_1_coins,Input         
        Store temp_1
        JnS check_negative_1
        Load temp_1
        Add coins1_u
        Store coins1_u
        Clear
		Store temp_1
        Load  coins1_u
        JnS print_digits
        Load coins1_u
        Add coins1_m // update machine coins
        Store coins1_m
        // 50 input
		Load s50
		JnS equal
pedir_050_coins,Input  
        Store temp_1
        JnS check_negative_050
        Load temp_1
        Add coins50_u
        Store coins50_u
        Clear
		Store temp_1
        Load coins50_u
        JnS print_digits
        Load coins50_u
        Add coins50_m // update machine coins
		Store coins50_m
		// 25 input
		Load s25
		JnS equal
pedir_025_coins,Input  
        Store temp_1
        JnS check_negative_025
        Load temp_1
        Add coins25_u
        Store coins25_u
        Clear
		Load coins25_u
        JnS print_digits
        Load coins25_u
        Add coins25_m // update machine coins
		Store coins25_m
        JnS break
        JumpI input_coins // return

/ insert desired product
input_product, HEX 0
				// instruction message
                JnS line_n_break
                Load s_ingresar
                JnS Getch
                Load s_producto
                JnS Getch
                Load s_decimal
                JnS Getch
                JnS line_n_break
                JnS print_products
                // input
pedir_product,Input
				Store temp_1
                JnS check_product
				Load temp_1
                Store wanted_product
                Clear
				Store temp_1
                JumpI input_product
				
/ print string (chptr: pointer to string start)
// load chptr value and then jump to getch. It updates chptr and then prints
Chptr, HEX 0
one, DEC 1

Getch,	HEX 000 /for JNS
		Store Chptr 
Getch2, LoadI	   Chptr	/ Load the character found at address chptr.
		Skipcond   400		/ If the character is a null, we are done.
		Jump	   Outp		/ Otherwise, proceed with operation.
		JumpI Getch

Outp,	Output			/ Output the character.
		Load	   Chptr	/ Move pointer to next character.
		Add  	   one		
		Store	   Chptr
		Jump	   Getch2
/ print break
break,  HEX 0
		Load lb
        Output
		JumpI break
            
/ print line
line, DEC 45
lenght, DEC 60
line_break, HEX 0
			Load lenght
            Store i
line_break2,Load i
            Skipcond 800 / if i > 0, cycle continues
            JumpI line_break / otherwise (i=0) goes back to jns
            Load line 
            Output
            Load i / i--
            Subt one
            Store i
            Jump line_break2
/ print line and break
line_n_break, HEX 0
			  JnS break
			  JnS line_break
              JnS break
              JumpI line_n_break
              
/ print '[coin] = ' (coin: pointer to coin string or any other)
// load coin string pointer before jns
coin, HEX 0
l_bracket, DEC 91
r_bracket, DEC 93
equal, HEX 0
		Store coin
        JnS break
		Load l_bracket
		Output
		Load coin
        JnS Getch
		Load r_bracket
		Output
		Load s_space
		Output
		Load s_equal
		Output
		Load s_space
		Output
        JumpI equal
/ print (Disponibles = [product quantity (p_q)]
// Load product quantity tag before calling jns
quantity, DEC 0
disponibility, HEX 0
				Store quantity
                Load l_bracket
                Output
                Load s_disponible
                JnS Getch
				Load s_equal
				Output
				Load s_space
				Output
                Load quantity
                JnS print_digits
                Load r_bracket
                Output
                JumpI disponibility


/ mod function (A,B) returns mod_val
// load and store a and b values before calling mod
// store after calling
A, DEC			0
B, DEC			0
mod_val, DEC 0
mod,		HEX 0
mod2,		LOAD		A			
			SUBT		B			/ 
			SKIPCOND	000			/ AC < 0 Condicion para sacar el mod
			JUMP		loop			/ jump al MODulo
			JUMP		Final		/ jump al FINAL

loop,		LOAD		A			/ Cargamos A
			SUBT		B			/ Restamos B del ACumulador
			STORE		A
			JUMP		mod2		

Final,		LOAD 		A			/ Cargamos A
			Store mod_val
			JumpI mod

/Mult(X,Y) returns X*Y
// load X and Y which are positive integers
X,    DEC    0    /input
Y,    DEC    0    /input
XY,    DEC    0    /output
J,    DEC    0    /local variable
/ one, DEC 1

Mult,    HEX    0    / Store return address here.
   Load     Y
   Skipcond 400
   Jump non_cero_Y
   Jump cero_Y
non_cero_Y,Load Y
   Store     J    / J = Y
 	Clear
   Store    XY    / XY = 0
Loop,    Load    X    
   Add    XY    / XY = X
   Store    XY    / XY = XY + X
   Load     J
   Subt    one
   Store    J
   Skipcond 400    / if J=0
   Jump    Loop
   JumpI    Mult    / Return to calling code.
cero_Y,   Clear
   Store    XY 
   JumpI Mult


/ digits(value = xxxx) returns units, tens, hundreds, thousands
// load and store value before call
// update/copy/clear ouput values after call
value, DEC 0
last_a, DEC 0
temp, DEC 0
ten, DEC 10
hundred, DEC 100
thousand, DEC 1000
ten_thousand, DEC 10000
units, DEC 0
tens, DEC 0
hundreds, DEC 0
thousands, DEC 0

digits, HEX 0
		Clear
        // setting zeros
        Store units
        Store tens
        Store hundreds
        Store thousands
		// units
        Load value
        Skipcond 800
        JumpI digits 
        Store A
        Store last_a
        Load ten
        Store Y // to use in multiplication
        Store B
        JnS mod
        Load mod_val
        Store temp
        Store units
		// tens
        Load last_a
		Subt temp
        Store last_a
        Skipcond 800
        JumpI digits
        Load last_a
		Store A
        Load B
        Store X
        JnS Mult / b = b*10
        Load XY
        Store B
        JnS mod / mod(a,b)
        Load mod_val
        Store temp
        Store N
        Load ten
        Store D
        JnS division / temp // 10
        Load Answer
        Store tens
        // hundreds
        Load last_a
		Subt temp
        Store last_a
        Skipcond 800
        JumpI digits
        Load last_a
		Store A
        Load B
        Store X
        JnS Mult / b = b*10
        Load XY
        Store B
        JnS mod / mod(a,b)
        Load mod_val
        Store temp
        Store N
        Load hundred
        Store D
        JnS division / temp // 100
        Load Answer
        Store hundreds
        // thousands
        Load last_a
		Subt temp
        Store last_a
        Skipcond 800
        JumpI digits
        Load last_a
		Store A
        Load B
        Store X
        JnS Mult / b = b*10
        Load XY
        Store B
        JnS mod / mod(a,b)
        Load mod_val
        Store temp
        Store N
        Load thousand
        Store D
        JnS division / temp // 1000
        Load Answer
        Store thousands
        JumpI digits

/ division (N,D) return Answer\
// source: http://www.csci.viu.ca/~wesselsd/courses/csci162/code/marie/#e4
// load N, D before call
N,      dec         25000       / user value for N
D,      dec         10000      / user value for D
K,      dec         0       / amount of N still left
/ J,      dec         0       / current multiple of D
Pow,    dec         0       / computing powers of 2
Answer, dec         0       / final result
Incr,   dec         1       / for ++ --
        
division,  HEX 0
		Load N
        Store K
        Clear
        Store J
        Store Pow
        Store Answer
Outer,	load        K       / not done if K is positive
        skipcond    800
        jump        Done    / otherwise we're finished
        load        Incr    / Pow = 1
        store       Pow
        load        D       / J = D
        store       J

Inner,  load        J       / not done if 2J < K
        add         J
        subt        K
        skipcond    000
        jump        AftIn   / leave inner loop
        load        J       / J = 2*J
        add         J
        store       J
        load        Pow     / Pow = 2*Pow
        add         Pow
        store       Pow
        
        jump        Inner   / back to top of inner loop
        
AftIn,  load        K       / K = K - J
        subt        J
        store       K
        load        Answer  / Answer = Answer + Pow
        add         Pow
        store       Answer
                
        jump        Outer   / back to top of outer loop

Done,   load        K       / if K < 0 answer--
        skipcond    000
        jump        Disp
        load        Answer
        subt        Incr
        Store Answer
Disp,   Load Answer
        JumpI division

/ print_digits(value, money_format:bool = 0) prints xxxx / $xx.xx
// change money_format before loading value as it is set to false in each call
// only Load value before cal, function stores the value
money_format, DEC 0
s_dot, DEC 46
print_digits, HEX 0
			  Store value
              JnS digits
              Load money_format
              Skipcond 400
              Jump dollar_sign
dollars,      Load thousands
			  Skipcond 800
              Jump skip0 // to skip first 0 for aesthetics
              Add offset
              Output
skip0,        Load hundreds
              Add offset
              Output
              Load money_format
              Skipcond 400
              Jump cents_separator
cents,        Load tens
              Add offset
              Output
              Load units
              Add offset
              Output
              Clear 
              Store money_format // reset money_format to false
              JumpI print_digits
dollar_sign,  Load s_money
			  Output
              Jump dollars
cents_separator, Load s_dot
				 Output
                 Jump cents
/Check input functions
/Checking for $1 coin input
check_negative_1, HEX 0
	Clear
	Store temp_2
    Clear
	Store temp_3
	Load temp_1
    Skipcond 000
    jump check_money_max_u_1
    Clear
	Store temp_1
    JnS reset_user
    
	Jump Main
check_money_max_u_1, JnS calc_money_1
		Load temp_3
		Add money_u
		Subt money_u_max
        Store temp_2
        Load temp_2
        Skipcond 800
        Jump  check_money_max_m_1
        Clear
		Store temp_2
        Load boolean_var
		Jump pedir_1_coins
        
check_money_max_m_1,  load temp_3
		Add money_u
		Add money_m
		Subt money_m_max
        Store temp_2
        Load temp_2
		Skipcond 800
        Jump end_1
        Clear
		Store temp_2
        Clear
        Store temp_3
        Load boolean_var
		Jump pedir_1_coins
end_1, JumpI check_negative_1
        
calc_money_1, HEX 0
		Load hundred
        Store X
        Load temp_1
        Store Y
        JnS Mult
        Load temp_3
        Add XY
        Store temp_3
        JumpI calc_money_1
/Checking for $0.5 coin input
check_negative_050, HEX 0
	Clear
	Store temp_2
    Clear
	Store temp_3
	Load temp_1
    Skipcond 000
    jump check_money_max_u_050
    Clear
	Store temp_1
    JnS reset_user
    
	Jump Main
check_money_max_u_050, JnS calc_money_050
		Load temp_3
		Add money_u
		Subt money_u_max
        Store temp_2
        Load temp_2
        Skipcond 800
        Jump  check_money_max_m_050
        Clear
		Store temp_2
        Load boolean_var
		Jump pedir_050_coins
        
check_money_max_m_050,  load temp_3
		Add money_u
		Add money_m
		Subt money_m_max
        Store temp_2
        Load temp_2
		Skipcond 800
        Jump end_050
        Clear
		Store temp_2
        Clear
        Store temp_3
        Load boolean_var
		Jump pedir_050_coins
end_050, JumpI check_negative_050
        
calc_money_050, HEX 0
		Load fifty
        Store X
        Load temp_1
        Store Y
        JnS Mult
        Load temp_3
        Add XY
        Store temp_3
        JumpI calc_money_050
/Checking for $0.25 coin input
check_negative_025, HEX 0
	Clear
	Store temp_2
    Clear
	Store temp_3
	Load temp_1
    Skipcond 000
    jump check_money_max_u_025
    Clear
	Store temp_1
    JnS reset_user
	Jump Main
check_money_max_u_025, JnS calc_money_025
		Load temp_3
		Add money_u
		Subt money_u_max
        Store temp_2
        Load temp_2
        Skipcond 800
        Jump  check_money_max_m_025
        Clear
		Store temp_2
        Load boolean_var
		Jump pedir_025_coins
        
check_money_max_m_025,  load temp_3
		Add money_u
		Add money_m
		Subt money_m_max
        Store temp_2
        Load temp_2
		Skipcond 800
        Jump end_025
        Clear
		Store temp_2
        Clear
        Store temp_3
        Load boolean_var
		Jump pedir_025_coins
end_025,JumpI check_negative_025
        
calc_money_025, HEX 0
		Load twenty_five
        Store X
        Load temp_1
        Store Y
        JnS Mult
        Load temp_3
        Add XY
        Store temp_3
        JumpI calc_money_025 
reset_user, HEX 0  // resets user money
	Clear
    //Add ONE
    Store coins1_u
    Clear
    //Add ONE
    Store coins50_u
    Clear
    //Add ONE
    Store coins25_u
    JumpI reset_user
///////////////////////////
reset_machine, HEX 0  // resets user money
	Load coins1_m
	Subt coins1_m
    Add TWO
    Store coins1_m
    Load coins50_m
	Subt coins50_m
    Add TWO
    Store coins50_m
    Load coins25_m
	Subt coins25_m
    Add TWO
    Store coins25_m
    JumpI reset_machine

///////////////////////////
check_product, HEX 0
	Load temp_1
    Skipcond 000
    jump check_0
    Clear
	Store temp_1
	Jump Main

check_0, Load temp_1
        Skipcond 400
        Jump  check_max_product
        Clear
		Store temp_1
		Jump pedir_product
        
check_max_product,  load temp_1
		Subt products
        Store temp_2
        Load temp_2
		Skipcond 800
        Jump end
        Clear
		Store temp_2
		Jump pedir_product
end,JumpI check_product

BOOL_1, DEC 1 //hay producto
BOOL_2, DEC 1  //hay cambio
BOOL_3, DEC 1 //al usuario le alcanza el dinero
respuesta, DEC 0
r_si, DEC 83
r_no, DEC 78

///////////////// Main program
Main, JnS reset_user
//JnS reset_machine
JnS print_coins 
JnS update_money
JnS input_coins
JnS print_coins
JnS input_product
JnS update_money


       
JnS drop_product  //restar producto seleccionado
Load BOOL_1
Skipcond 800
Jump if_B1
JnS compute_change
Load BOOL_3
Skipcond 800
Jump  if_B3
JnS print_change  //return cambio

pregunta,JnS line_n_break //pregunta al usuario si desea continuar con el programa
Load s_pregunta
JnS Getch
Input
Store respuesta
if_r1, Load respuesta 
	   Subt r_si
	   Skipcond 400	
	   Jump	 Stop // r=N, se para el programa
Jump Main //volver a ejecutar
//imprimir mensajes de erros, TODO validacion
if_B1, Load BOOL_1 // producto disponible
	   Skipcond 800	
	   Jump	 err1 // b1=0
if_B2, Load BOOL_2 // hay cambio disponible
	   Skipcond 800	
	   Jump	 err2 // b2=0
if_B3, Load BOOL_3 // te alcanza el dinero
	   Skipcond 800	
	   Jump	 err3 // b3=0  
err1, JnS line_n_break //No disponemos el producto
      Load s_No_disponemos
      JnS Getch
      Load s_el
      JnS Getch
      Load s_producto
      JnS Getch
      JnS return_money  
	  Jump pregunta
err2, JnS line_n_break //No disponemos cambio
	  Load s_No_disponemos
      JnS Getch
      Load s_cambio
      JnS Getch
      JnS return_money  
      Jump pregunta
err3, JnS line_n_break //No ingresaste suficiente dinero
      Load s_falta_dinero
      JnS Getch
      JnS return_money  
	  Jump pregunta

Stop, Halt
