///////////////// Main program
JnS print_coins
JnS input_coins
JnS print_coins
JnS input_product
Halt



///////////////// functions
// print coins
print_coins,    HEX 0
				/ section message
				JnS line_n_break
                load s_cantidad
				JnS Getch
                Load s_de
				JnS Getch
				Load s_monedas
				JnS Getch
                JnS line_n_break
                / 1 coins
                Load s100
                JnS equal
				Load coins1_m
				Add offset
                Output
				/ 50 coins
                Load s50
                JnS equal
				Load coins50_m
				Add offset
                Output
				/ 25 coins
                Load s25
                JnS equal
				Load coins25_m
				Add offset
                Output
                JumpI print_coins

/ print product names, prices and quantities
products, DEC 5 / how many products leave at 5
current_quantity, HEX 0 
current_price, HEX 0
s_numeral, DEC 35
s_money, DEC 36

print_products, HEX 0
				Load products
				Store i
print_products_2, Load p_prices_start // updated current price
				  Add i
                  Store current_price
                  Load p_quantities_start // update current quantity
				  Add i
                  Store current_quantity
                  / output line #i product_name product_price (quantity)
                  Load s_numeral 				  
                  Output
                  Load i
                  Add offset 
                  Output
                  Load s_space
                  Output   
                  Load s_money
                  Output
                  // TODO implement fuction to print DEC as YYYY.XX in unicode and print current_price
                  Load s_space
                  Output
                  LoadI current_quantity
                  JnS disponibility
                  JnS break
                  JnS break
                  
                  / i--
                  Load i
                  Subt one
                  Store i
                  Skipcond 800
                  JumpI print_products
                  Jump print_products_2

/ insert coins
input_coins,  HEX 0
		/ instruction message
        JnS line_n_break
        Load s_ingresar
		JnS Getch
		Load s_monedas
		JnS Getch
		Load s_decimal
		JnS Getch
		JnS line_n_break
		/ 1 input
        Load s_de
		JnS Getch
		Load s100
        JnS Getch
        Input
        Store coins1_u
        Add coins1_m // update machine coins
        Store coins1_m
        / 50 input
        JnS break
        Load s_de
		JnS Getch
		Load s50
		JnS Getch
        Input
		Store coins50_u
        Add coins50_m // update machine coins
		Store coins50_m
		/ 25 input
        JnS break
        Load s_de
		JnS Getch
		Load s25
		JnS Getch
        Input
		Store coins25_u
        Add coins25_m // update machine coins
		Store coins25_m
        JnS break
        JumpI input_coins // return

/ insert desired product
input_product, HEX 0
				/ instruction message
                JnS line_n_break
                Load s_ingresar
                JnS Getch
                Load s_producto
                JnS Getch
                Load s_decimal
                JnS Getch
                JnS line_n_break
                JnS print_products
                / input
                Input
                Store wanted_product
                JumpI input_product

/ print string (chptr: pointer to string start)
// load chptr value and then jump to getch. It updates chptr and then prints
Chptr, HEX 0
one, DEC 1

Getch,	HEX 000 /for JNS
		Store Chptr 
Getch2, LoadI	   Chptr	/ Load the character found at address chptr.
		Skipcond   400		/ If the character is a null, we are done.
		Jump	   Outp		/ Otherwise, proceed with operation.
		JumpI Getch

Outp,	Output			/ Output the character.
		Load	   Chptr	/ Move pointer to next character.
		Add  	   one		
		Store	   Chptr
		Jump	   Getch2
/ print break
break,  HEX 0
		Load lb
        Output
		JumpI break
            
/ print line
line, DEC 45
lenght, DEC 85
line_break, HEX 0
			Load lenght
            Store i
line_break2,Load i
            Skipcond 800 / if i > 0, cycle continues
            JumpI line_break / otherwise (i=0) goes back to jns
            Load line 
            Output
            Load i / i--
            Subt one
            Store i
            Jump line_break2
/ print line and break
line_n_break, HEX 0
			  JnS break
			  JnS line_break
              JnS break
              JumpI line_n_break
              
/ print '[coin] = ' (coin: pointer to coin string or any other)
// load coin string pointer before jns
coin, HEX 0
l_bracket, DEC 91
r_bracket, DEC 93
equal, HEX 0
		Store coin
        JnS break
		Load l_bracket
		Output
		Load coin
        JnS Getch
		Load r_bracket
		Output
		Load s_space
		Output
		Load s_equal
		Output
		Load s_space
		Output
        JumpI equal
/ print (Disponibles = [product quantity (p_q)]
// Load product quantity tag before calling jns
quantity, DEC 0
disponibility, HEX 0
				Store quantity
                Load l_bracket
                Output
                Load s_disponible
                JnS Getch
				Load s_equal
				Output
				Load s_space
				Output
                Load quantity
                Add offset /assuming is less than 10
                Output
                Load r_bracket
                Output
                JumpI disponibility



///////////////// variables & pointers
/ unicode offset
offset, DEC 48
/ general counter
i, HEX 0
/ machine coins
coins1_m, DEC 2
coins50_m, DEC 2
coins25_m, DEC 2
/ machine money 
// TODO update with initial machine coins (
money_m, DEC 0
/ user money
// TODO update with initial user coins
money_u, DEC 0
/ user coins 
coins1_u, DEC 1
coins50_u, DEC 2
coins25_u, DEC 3
/ product prices
p_prices_start, HEX EC5 /puntero aqui + 0
p1_price, DEC 0
p2_price, DEC 0
p3_price, DEC 0
p4_price, DEC 0
p5_price, DEC 0
/ product quantities
p_quantities_start, HEX 0CB /puntero + 0
p1_q, DEC 2
p2_q, DEC 3
p3_q, DEC 4
p4_q, DEC 0
p5_q, DEC 0
/ currently wanted product
wanted_product, DEC 0

///////////////// strings (first line is pointer to string start (+1), manually added)
/ Ingresar
s_ingresar, HEX 0D3 /HEX AAA
	DEC 73
	DEC 110
	DEC 103
	DEC 114
	DEC 101
	DEC 115
	DEC 97
	DEC 114
	DEC 32
	DEC 000
/ Cantidad
s_cantidad, HEX 0DE
	DEC 67
	DEC 97
	DEC 110
	DEC 116
	DEC 105
	DEC 100
	DEC 97
	DEC 100
	DEC 32
	DEC 000
    
/ Monedas 
s_monedas, HEX 0E9 / HEX BBB
	DEC 32
	DEC 77
	DEC 111
	DEC 110
	DEC 101
	DEC 100
	DEC 97
	DEC 115
	DEC 32
    DEC 000

/ Producto
s_producto, HEX 0F4
	DEC 80
	DEC 114
	DEC 111
	DEC 100
	DEC 117
	DEC 99
	DEC 116
	DEC 111
	DEC 32
	DEC 000
    
/ Disponible
s_disponible,HEX 0FF
 	DEC 68 
	DEC 105
	DEC 115
	DEC 112
	DEC 111
	DEC 110
	DEC 105
	DEC 98
	DEC 108
	DEC 101
	DEC 32
	DEC 000
    
/ de    
s_de, HEX 10C / HEX AAB
	DEC 100
	DEC 101
    DEC 32
	DEC 000
    
/ $1
s100, HEX 111
	DEC 36
	DEC 49
	DEC 32
	DEC 000
    
/ $0.50
s50, HEX 116
	DEC 36
	DEC 48
	DEC 46
	DEC 53
	DEC 48
	DEC 32
	DEC 000
    
/ $0.25
s25, HEX 11E
	DEC 36
	DEC 48
	DEC 46
	DEC 50
	DEC 53
	DEC 32
	DEC 000
    
/ line break
lb, DEC 10

/ space
s_space, DEC 32

/ =
s_equal, DEC 61

/ (en unicode, terminar con dec/hex 0)
s_unicode, HEX 129
	DEC 40
	DEC 101
	DEC 110
	DEC 32
	DEC 117
	DEC 110
	DEC 105
	DEC 99
	DEC 111
	DEC 100
	DEC 101
	DEC 44
	DEC 32
	DEC 116
	DEC 101
	DEC 114
	DEC 109
	DEC 105
	DEC 110
	DEC 97
	DEC 114
	DEC 32
	DEC 99
	DEC 111
	DEC 110
	DEC 32
	DEC 100
	DEC 101
	DEC 99
	DEC 47
	DEC 104
	DEC 101
	DEC 120
	DEC 32
	DEC 48
	DEC 41
	DEC 32
	DEC 000
/ (en decimal)
s_decimal, HEX 150
	DEC 40
	DEC 101
	DEC 110
	DEC 32
	DEC 100
	DEC 101
	DEC 99
	DEC 105
	DEC 109
	DEC 97
	DEC 108
	DEC 41
	DEC 32
	DEC 000
